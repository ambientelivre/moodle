<<<<<<< HEAD
{"version":3,"file":"notification.min.js","sources":["../src/notification.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Notification manager for in-page notifications in Moodle.\n *\n * @module     core/notification\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n */\nimport Pending from 'core/pending';\nimport Log from 'core/log';\n\nlet currentContextId = M.cfg.contextid;\n\nconst notificationTypes = {\n    success:  'core/notification_success',\n    info:     'core/notification_info',\n    warning:  'core/notification_warning',\n    error:    'core/notification_error',\n};\n\nconst notificationRegionId = 'user-notifications';\n\nconst Selectors = {\n    notificationRegion: `#${notificationRegionId}`,\n    fallbackRegionParents: [\n        '#region-main',\n        '[role=\"main\"]',\n        'body',\n    ],\n};\n\nconst setupTargetRegion = () => {\n    let targetRegion = getNotificationRegion();\n    if (targetRegion) {\n        return false;\n    }\n\n    const newRegion = document.createElement('span');\n    newRegion.id = notificationRegionId;\n\n    return Selectors.fallbackRegionParents.some(selector => {\n        const targetRegion = document.querySelector(selector);\n\n        if (targetRegion) {\n            targetRegion.prepend(newRegion);\n            return true;\n        }\n\n        return false;\n    });\n};\n\n/**\n * A notification object displayed to a user.\n *\n * @typedef  {Object} Notification\n * @property {string} message       The body of the notification\n * @property {string} type          The type of notification to add (error, warning, info, success).\n * @property {Boolean} closebutton  Whether to show the close button.\n * @property {Boolean} announce     Whether to announce to screen readers.\n */\n\n/**\n * Poll the server for any new notifications.\n *\n * @method\n * @returns {Promise}\n */\nexport const fetchNotifications = async() => {\n    const Ajax = await import('core/ajax');\n\n    return Ajax.call([{\n        methodname: 'core_fetch_notifications',\n        args: {\n            contextid: currentContextId\n        }\n    }])[0]\n    .then(addNotifications);\n};\n\n/**\n * Add all of the supplied notifications.\n *\n * @method\n * @param {Notification[]} notifications The list of notificaitons\n * @returns {Promise}\n */\nconst addNotifications = notifications => {\n    if (!notifications.length) {\n        return Promise.resolve();\n    }\n\n    const pendingPromise = new Pending('core/notification:addNotifications');\n    notifications.forEach(notification => renderNotification(notification.template, notification.variables));\n\n    return pendingPromise.resolve();\n};\n\n/**\n * Add a notification to the page.\n *\n * Note: This does not cause the notification to be added to the session.\n *\n * @method\n * @param {Notification} notification The notification to add.\n * @returns {Promise}\n */\nexport const addNotification = notification => {\n    const pendingPromise = new Pending('core/notification:addNotifications');\n\n    let template = notificationTypes.error;\n\n    notification = {\n        closebutton:    true,\n        announce:       true,\n        type:           'error',\n        ...notification,\n    };\n\n    if (notification.template) {\n        template = notification.template;\n        delete notification.template;\n    } else if (notification.type) {\n        if (typeof notificationTypes[notification.type] !== 'undefined') {\n            template = notificationTypes[notification.type];\n        }\n        delete notification.type;\n    }\n\n    return renderNotification(template, notification)\n    .then(pendingPromise.resolve);\n};\n\nconst renderNotification = async(template, variables) => {\n    if (typeof variables.message === 'undefined' || !variables.message) {\n        Log.debug('Notification received without content. Skipping.');\n        return;\n    }\n\n    const pendingPromise = new Pending('core/notification:renderNotification');\n    const Templates = await import('core/templates');\n\n    Templates.renderForPromise(template, variables)\n    .then(({html, js = ''}) => {\n        Templates.prependNodeContents(getNotificationRegion(), html, js);\n\n        return;\n    })\n    .then(pendingPromise.resolve)\n    .catch(exception);\n};\n\nconst getNotificationRegion = () => document.querySelector(Selectors.notificationRegion);\n\n/**\n * Alert dialogue.\n *\n * @method\n * @param {String|Promise} title\n * @param {String|Promise} message\n * @param {String|Promise} cancelText\n * @returns {Promise}\n */\nexport const alert = async(title, message, cancelText) => {\n    var pendingPromise = new Pending('core/notification:alert');\n\n    const AlertModal = await import('core/local/modal/alert');\n\n    const modal = await AlertModal.create({\n        body: message,\n        title: title,\n        buttons: {\n            cancel: cancelText,\n        },\n        removeOnClose: true,\n        show: true,\n    });\n    pendingPromise.resolve();\n    return modal;\n};\n\n/**\n * The confirm has now been replaced with a save and cancel dialogue.\n *\n * @method\n * @param {String|Promise} title\n * @param {String|Promise} question\n * @param {String|Promise} saveLabel\n * @param {String|Promise} noLabel\n * @param {String|Promise} saveCallback\n * @param {String|Promise} cancelCallback\n * @returns {Promise}\n */\nexport const confirm = (title, question, saveLabel, noLabel, saveCallback, cancelCallback) =>\n        saveCancel(title, question, saveLabel, saveCallback, cancelCallback);\n\n/**\n * The Save and Cancel dialogue helper.\n *\n * @method\n * @param {String|Promise} title\n * @param {String|Promise} question\n * @param {String|Promise} saveLabel\n * @param {String|Promise} saveCallback\n * @param {String|Promise} cancelCallback\n * @param {Object} options\n * @param {HTMLElement} [options.triggerElement=null] The element that triggered the modal (will receive the focus after hidden)\n * @returns {Promise}\n */\nexport const saveCancel = async(title, question, saveLabel, saveCallback, cancelCallback, {\n    triggerElement = null,\n} = {}) => {\n    const pendingPromise = new Pending('core/notification:confirm');\n\n    const [\n        SaveCancelModal,\n        ModalEvents,\n    ] = await Promise.all([\n        import('core/modal_save_cancel'),\n        import('core/modal_events'),\n    ]);\n\n    const modal = await SaveCancelModal.create({\n        title,\n        body: question,\n        buttons: {\n            // Note: The noLabel is no longer supported.\n            save: saveLabel,\n        },\n        removeOnClose: true,\n        show: true,\n    });\n    modal.getRoot().on(ModalEvents.save, saveCallback);\n    modal.getRoot().on(ModalEvents.cancel, cancelCallback);\n    modal.getRoot().on(ModalEvents.hidden, () => triggerElement?.focus());\n    pendingPromise.resolve();\n\n    return modal;\n};\n\n/**\n * The Delete and Cancel dialogue helper.\n *\n * @method\n * @param {String|Promise} title\n * @param {String|Promise} question\n * @param {String|Promise} deleteLabel\n * @param {String|Promise} deleteCallback\n * @param {String|Promise} cancelCallback\n * @param {Object} options\n * @param {HTMLElement} [options.triggerElement=null] The element that triggered the modal (will receive the focus after hidden)\n * @returns {Promise}\n */\nexport const deleteCancel = async(title, question, deleteLabel, deleteCallback, cancelCallback, {\n    triggerElement = null,\n} = {}) => {\n    const pendingPromise = new Pending('core/notification:confirm');\n\n    const [\n        DeleteCancelModal,\n        ModalEvents,\n    ] = await Promise.all([\n        import('core/modal_delete_cancel'),\n        import('core/modal_events'),\n    ]);\n\n    const modal = await DeleteCancelModal.create({\n        title: title,\n        body: question,\n        buttons: {\n            'delete': deleteLabel\n        },\n        removeOnClose: true,\n        show: true,\n    });\n        modal.getRoot().on(ModalEvents.delete, deleteCallback);\n        modal.getRoot().on(ModalEvents.cancel, cancelCallback);\n        modal.getRoot().on(ModalEvents.hidden, () => triggerElement?.focus());\n        pendingPromise.resolve();\n\n        return modal;\n};\n\n\n/**\n * Add all of the supplied notifications.\n *\n * @param {Promise|String} title The header of the modal\n * @param {Promise|String} question What do we want the user to confirm\n * @param {Promise|String} saveLabel The modal action link text\n * @param {Object} options\n * @param {HTMLElement} [options.triggerElement=null] The element that triggered the modal (will receive the focus after hidden)\n * @return {Promise}\n */\nexport const saveCancelPromise = (title, question, saveLabel, {\n    triggerElement = null,\n} = {}) => new Promise((resolve, reject) => {\n    saveCancel(title, question, saveLabel, resolve, reject, {triggerElement});\n});\n\n/**\n * Add all of the supplied notifications.\n *\n * @param {Promise|String} title The header of the modal\n * @param {Promise|String} question What do we want the user to confirm\n * @param {Promise|String} deleteLabel The modal action link text\n * @param {Object} options\n * @param {HTMLElement} [options.triggerElement=null] The element that triggered the modal (will receive the focus after hidden)\n * @return {Promise}\n */\nexport const deleteCancelPromise = (title, question, deleteLabel, {\n    triggerElement = null,\n} = {}) => new Promise((resolve, reject) => {\n    deleteCancel(title, question, deleteLabel, resolve, reject, {triggerElement});\n});\n\n/**\n * Wrap M.core.exception.\n *\n * @method\n * @param {Error} ex\n */\nexport const exception = async ex => {\n    const pendingPromise = new Pending('core/notification:displayException');\n\n    // Fudge some parameters.\n    if (!ex.stack) {\n        ex.stack = '';\n    }\n\n    if (ex.debuginfo) {\n        ex.stack += ex.debuginfo + '\\n';\n    }\n\n    if (!ex.backtrace && ex.stacktrace) {\n        ex.backtrace = ex.stacktrace;\n    }\n\n    if (ex.backtrace) {\n        ex.stack += ex.backtrace;\n        const ln = ex.backtrace.match(/line ([^ ]*) of/);\n        const fn = ex.backtrace.match(/ of ([^:]*): /);\n        if (ln && ln[1]) {\n            ex.lineNumber = ln[1];\n        }\n        if (fn && fn[1]) {\n            ex.fileName = fn[1];\n            if (ex.fileName.length > 30) {\n                ex.fileName = '...' + ex.fileName.substr(ex.fileName.length - 27);\n            }\n        }\n    }\n\n    if (typeof ex.name === 'undefined' && ex.errorcode) {\n        ex.name = ex.errorcode;\n    }\n\n    const Y = await import('core/yui');\n    Y.use('moodle-core-notification-exception', function() {\n        var modal = new M.core.exception(ex);\n\n        modal.show();\n\n        pendingPromise.resolve();\n    });\n};\n\n/**\n * Initialise the page for the suppled context, and displaying the supplied notifications.\n *\n * @method\n * @param {Number} contextId\n * @param {Notification[]} notificationList\n */\nexport const init = (contextId, notificationList) => {\n    currentContextId = contextId;\n\n    // Setup the message target region if it isn't setup already.\n    setupTargetRegion();\n\n    // Add provided notifications.\n    addNotifications(notificationList);\n};\n\n// To maintain backwards compatability we export default here.\nexport default {\n    init,\n    fetchNotifications,\n    addNotification,\n    alert,\n    confirm,\n    saveCancel,\n    deleteCancel,\n    saveCancelPromise,\n    deleteCancelPromise,\n    exception,\n};\n"],"names":["currentContextId","M","cfg","contextid","notificationTypes","success","info","warning","error","Selectors","notificationRegion","fallbackRegionParents","fetchNotifications","async","call","methodname","args","then","addNotifications","notifications","length","Promise","resolve","pendingPromise","Pending","forEach","notification","renderNotification","template","variables","addNotification","closebutton","announce","type","message","debug","Templates","renderForPromise","_ref","html","js","prependNodeContents","getNotificationRegion","catch","exception","document","querySelector","alert","title","cancelText","AlertModal","modal","create","body","buttons","cancel","removeOnClose","show","confirm","question","saveLabel","noLabel","saveCallback","cancelCallback","saveCancel","triggerElement","SaveCancelModal","ModalEvents","all","save","getRoot","on","hidden","focus","deleteCancel","deleteLabel","deleteCallback","DeleteCancelModal","delete","saveCancelPromise","reject","deleteCancelPromise","ex","stack","debuginfo","backtrace","stacktrace","ln","match","fn","lineNumber","fileName","substr","name","errorcode","use","core","init","contextId","notificationList","newRegion","createElement","id","some","selector","targetRegion","prepend","setupTargetRegion"],"mappings":"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"}
=======
{"version":3,"sources":["../src/notification.js"],"names":["define","Y","$","log","Pending","notificationModule","types","fieldName","fetchNotifications","pendingPromise","require","ajax","promises","call","methodname","args","contextid","then","addNotifications","always","resolve","notifications","each","i","notification","renderNotification","template","variables","setupTargetRegion","targetRegion","length","newRegion","attr","prepend","addNotification","error","extend","closebutton","announce","type","message","debug","templates","render","html","js","runTemplateJS","catch","exception","alert","title","yesLabel","use","M","core","show","confirm","question","noLabel","yesCallback","noCallback","modal","on","ex","stack","debuginfo","backtrace","stacktrace","ln","match","fn","lineNumber","fileName","substr","name","errorcode","init"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A system for displaying notifications to users from the session.\n *\n * Wrapper for the YUI M.core.notification class. Allows us to\n * use the YUI version in AMD code until it is replaced.\n *\n * @module     core/notification\n * @class      notification\n * @package    core\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n */\ndefine(['core/yui', 'jquery', 'core/log', 'core/pending'],\nfunction(Y, $, log, Pending) {\n    var notificationModule = {\n        types: {\n            'success':  'core/notification_success',\n            'info':     'core/notification_info',\n            'warning':  'core/notification_warning',\n            'error':    'core/notification_error',\n        },\n\n        fieldName: 'user-notifications',\n\n        fetchNotifications: function() {\n            var pendingPromise = new Pending('core/notification:fetchNotifications');\n\n            require(['core/ajax'], function(ajax) {\n                var promises = ajax.call([{\n                    methodname: 'core_fetch_notifications',\n                    args: {\n                        contextid: notificationModule.contextid\n                    }\n                }]);\n\n                // This currently fails when not logged in.\n                // eslint-disable-next-line promise/catch-or-return\n                promises[0]\n                .then(notificationModule.addNotifications)\n                .always(pendingPromise.resolve);\n            });\n        },\n\n        addNotifications: function(notifications) {\n            var pendingPromise = new Pending('core/notification:addNotifications');\n\n            if (!notifications) {\n                notifications = [];\n            }\n\n            $.each(notifications, function(i, notification) {\n                notificationModule.renderNotification(notification.template, notification.variables);\n            });\n\n            pendingPromise.resolve();\n        },\n\n        setupTargetRegion: function() {\n            var targetRegion = $('#' + notificationModule.fieldName);\n            if (targetRegion.length) {\n                return false;\n            }\n\n            var newRegion = $('<span>').attr('id', notificationModule.fieldName);\n\n            targetRegion = $('#region-main');\n            if (targetRegion.length) {\n                return targetRegion.prepend(newRegion);\n            }\n\n            targetRegion = $('[role=\"main\"]');\n            if (targetRegion.length) {\n                return targetRegion.prepend(newRegion);\n            }\n\n            targetRegion = $('body');\n            return targetRegion.prepend(newRegion);\n        },\n\n        addNotification: function(notification) {\n            var pendingPromise = new Pending('core/notification:addNotifications');\n\n            var template = notificationModule.types.error;\n\n            notification = $.extend({\n                closebutton:    true,\n                announce:       true,\n                type:           'error'\n            }, notification);\n\n            if (notification.template) {\n                template = notification.template;\n                delete notification.template;\n            } else if (notification.type) {\n                if (typeof notificationModule.types[notification.type] !== 'undefined') {\n                    template = notificationModule.types[notification.type];\n                }\n                delete notification.type;\n            }\n\n            pendingPromise.resolve();\n\n            return notificationModule.renderNotification(template, notification);\n        },\n\n        renderNotification: function(template, variables) {\n            if (typeof variables.message === 'undefined' || !variables.message) {\n                log.debug('Notification received without content. Skipping.');\n                return;\n            }\n\n            var pendingPromise = new Pending('core/notification:renderNotification');\n\n            require(['core/templates'], function(templates) {\n                templates.render(template, variables)\n                .then(function(html, js) {\n                    $('#' + notificationModule.fieldName).prepend(html);\n                    templates.runTemplateJS(js);\n\n                    return;\n                })\n                .then(pendingPromise.resolve)\n                .catch(notificationModule.exception);\n            });\n        },\n\n        alert: function(title, message, yesLabel) {\n            var pendingPromise = new Pending('core/notification:alert');\n\n            // Here we are wrapping YUI. This allows us to start transitioning, but\n            // wait for a good alternative without having inconsistent dialogues.\n            Y.use('moodle-core-notification-alert', function() {\n                var alert = new M.core.alert({\n                    title: title,\n                    message: message,\n                    yesLabel: yesLabel\n                });\n\n                alert.show();\n\n                pendingPromise.resolve();\n            });\n        },\n\n        confirm: function(title, question, yesLabel, noLabel, yesCallback, noCallback) {\n            var pendingPromise = new Pending('core/notification:confirm');\n\n            // Here we are wrapping YUI. This allows us to start transitioning, but\n            // wait for a good alternative without having inconsistent dialogues.\n            Y.use('moodle-core-notification-confirm', function() {\n                var modal = new M.core.confirm({\n                    title: title,\n                    question: question,\n                    yesLabel: yesLabel,\n                    noLabel: noLabel\n                });\n\n                modal.on('complete-yes', function() {\n                    yesCallback();\n                });\n                if (noCallback) {\n                    modal.on('complete-no', function() {\n                        noCallback();\n                    });\n                }\n                modal.show();\n\n                pendingPromise.resolve();\n            });\n        },\n\n        exception: function(ex) {\n            var pendingPromise = new Pending('core/notification:addNotifications');\n\n            // Fudge some parameters.\n            if (typeof ex.stack == 'undefined') {\n                ex.stack = '';\n            }\n            if (ex.debuginfo) {\n                ex.stack += ex.debuginfo + '\\n';\n            }\n            if (!ex.backtrace && ex.stacktrace) {\n                ex.backtrace = ex.stacktrace;\n            }\n            if (ex.backtrace) {\n                ex.stack += ex.backtrace;\n                var ln = ex.backtrace.match(/line ([^ ]*) of/);\n                var fn = ex.backtrace.match(/ of ([^:]*): /);\n                if (ln && ln[1]) {\n                    ex.lineNumber = ln[1];\n                }\n                if (fn && fn[1]) {\n                    ex.fileName = fn[1];\n                    if (ex.fileName.length > 30) {\n                        ex.fileName = '...' + ex.fileName.substr(ex.fileName.length - 27);\n                    }\n                }\n            }\n            if (typeof ex.name == 'undefined' && ex.errorcode) {\n                ex.name = ex.errorcode;\n            }\n\n            Y.use('moodle-core-notification-exception', function() {\n                var modal = new M.core.exception(ex);\n\n                modal.show();\n\n                pendingPromise.resolve();\n            });\n        }\n    };\n\n    return /** @alias module:core/notification */{\n        init: function(contextid, notifications) {\n            notificationModule.contextid = contextid;\n\n            // Setup the message target region if it isn't setup already\n            notificationModule.setupTargetRegion();\n\n            // Add provided notifications.\n            notificationModule.addNotifications(notifications);\n\n            // Poll for any new notifications.\n            notificationModule.fetchNotifications();\n        },\n\n        /**\n         * Poll the server for any new notifications.\n         *\n         * @method fetchNotifications\n         */\n        fetchNotifications: notificationModule.fetchNotifications,\n\n        /**\n         * Add a notification to the page.\n         *\n         * Note: This does not cause the notification to be added to the session.\n         *\n         * @method addNotification\n         * @param {Object}  notification                The notification to add.\n         * @param {string}  notification.message        The body of the notification\n         * @param {string}  notification.type           The type of notification to add (error, warning, info, success).\n         * @param {Boolean} notification.closebutton    Whether to show the close button.\n         * @param {Boolean} notification.announce       Whether to announce to screen readers.\n         */\n        addNotification: notificationModule.addNotification,\n\n        /**\n         * Wrap M.core.alert.\n         *\n         * @method alert\n         * @param {string} title\n         * @param {string} message\n         * @param {string} yesLabel\n         */\n        alert: notificationModule.alert,\n\n        /**\n         * Wrap M.core.confirm.\n         *\n         * @method confirm\n         * @param {string} title\n         * @param {string} question\n         * @param {string} yesLabel\n         * @param {string} noLabel\n         * @param {function} yesCallback\n         * @param {function} noCallback Optional parameter to be called if the user presses cancel.\n         */\n        confirm: notificationModule.confirm,\n\n        /**\n         * Wrap M.core.exception.\n         *\n         * @method exception\n         * @param {Error} ex\n         */\n        exception: notificationModule.exception\n    };\n});\n"],"file":"notification.min.js"}
>>>>>>> upstream/MOODLE_38_STABLE
